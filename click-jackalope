#!/usr/bin/env bash
# clickjack-test.sh
# Usage: clickjack-test.sh -u <url> [-e] [-f <filename>] [-h]
# -u <url>       : URL to load in the iframe (required)
# -e             : execute/open the generated html (optional)
# -f <filename>  : output filename (default: clickjack_test.html)
# -h             : help

set -euo pipefail

FILE="clickjack_test.html"
OPEN=false
URL=""

print_help() {
  cat <<EOF
clickjack-test.sh - quick clickjacking proof-of-concept page generator

Usage:
  ./clickjack-test.sh -u "https://target.example" [-e] [-f out.html]

Options:
  -u URL        Target URL to embed in iframe (required)
  -e            Open the generated HTML with the system default browser
  -f FILENAME   Output filename (default: clickjack_test.html)
  -h            Show this help
EOF
}

# Parse options
while getopts ":u:ef:h" opt; do
  case ${opt} in
    u ) URL="$OPTARG" ;;
    e ) OPEN=true ;;
    f ) FILE="$OPTARG" ;;
    h )
      print_help
      exit 0
      ;;
    \? )
      echo "Invalid option: -$OPTARG" >&2
      print_help
      exit 2
      ;;
    : )
      echo "Option -$OPTARG requires an argument." >&2
      print_help
      exit 2
      ;;
  esac
done

# Validate
if [[ -z "$URL" ]]; then
  echo "ERROR: target URL is required (-u)." >&2
  print_help
  exit 2
fi

# Basic normalization/check (not exhaustive)
if [[ ! "$URL" =~ ^https?:// ]]; then
  echo "WARNING: URL does not start with http:// or https://. Prepending https://"
  URL="https://$URL"
fi

# Create HTML safely (use straight double quotes)
cat > "$FILE" <<HTML
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Clickjacking test: iframe of $URL</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    body { margin: 0; display: flex; flex-direction: column; height: 100vh; }
    header { padding: 8px 12px; background: #222; color: white; font-family: sans-serif; }
    .frame-wrap { flex: 1; display: flex; align-items: center; justify-content: center; background: #eee; }
    iframe { border: 4px solid #444; width: 90%; height: 90%; box-shadow: 0 4px 12px rgba(0,0,0,0.3); }
    footer { padding: 6px 12px; font-size: 12px; color: #444; background: #fafafa; }
  </style>
</head>
<body>
  <header>Clickjacking test page â€” embedded URL: ${URL}</header>
  <div class="frame-wrap">
    <!-- iframe intentionally minimal for clickjacking tests -->
    <iframe src="${URL}" title="clickjacking-test" sandbox=""></iframe>
  </div>
  <footer>Generated by clickjack-test.sh</footer>
</body>
</html>
HTML

echo "Wrote $FILE (target: $URL)"

if $OPEN; then
  # Cross-platform open
  if command -v xdg-open >/dev/null 2>&1; then
    xdg-open "$FILE" >/dev/null 2>&1 || echo "Failed to open $FILE with xdg-open"
  elif command -v open >/dev/null 2>&1; then
    open "$FILE" >/dev/null 2>&1 || echo "Failed to open $FILE with open"
  elif command -v start >/dev/null 2>&1; then
    # 'start' is typically a Windows cmd builtin; in Git Bash you can use 'cmd.exe /c start'
    cmd.exe /c start "" "$(cygpath -w "$PWD/$FILE")" >/dev/null 2>&1 || echo "Failed to open $FILE with start"
  else
    echo "No known method found to open the file automatically. Please open $FILE manually."
  fi
fi

exit 0
